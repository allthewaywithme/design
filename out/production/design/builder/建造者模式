1.创建属性对象 Hourse
2.定义属性的具体行为动作，定义为接口，公共调用，各个实现不同 HourseBuilder
3.创建具体实现，实现HourseBuilder接口，重写HourseBuilder接口里的方法满足自己业务需求PingFangBuilder，GongyuBuilder
4.MainClass里创建实例调用


com包里为建造者模式实际的简单应用
https://www.cnblogs.com/yujiwei/p/6883244.html
建造者模式，英文名builder_pattern，抛开所有文献对建造者模式的定义，
我认为建造者模式是当我们现有的资源无法满足我们的业务的时候，
我们进行的一个统一的建造或者改造的一个过程，或者说是一个代码的封装，我们可以叫它为建造者模式。
　　  我曾经做过一个这样的模块，一个业务系统，数据产生在子系统A里面，
同时子系统B需要A所产生的数据，但是需要经过"改造"和"加工",我们打个比方，
假如A得到了一个关于交易的情况的一个Json类型的数据包，给B的时候也许有一些属性和字段不需要，
或者A没有的而B却需要进行自主的构建，其实假如我们只有这一项的话，完全不需要使用到设计模式，
但是假如A和B之间需要交换的数据种类非常的多，并且有可能C系统也会参与进来，
甚至D系统也来了。。。这个时候我们不得不想一个统一的办法来管理它们，没错，就是建造者模式
